import streamlit as st

from analyzer.pronunciation_analyzer import (
    AdvancedPronunciationAnalyzer,
    AnalysisError,
    TranscriptionError,
)
from db_connector import save_result
from processors.alignment import align_texts
from processors.audio_processor import extract_basic_features


def main():
    st.title('üéØ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑')
    st.caption(
        '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ –∏ (–æ–ø—Ü.) —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ü–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏.'
    )
    with st.expander('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏'):
        model_size = st.selectbox(
            '–†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ Whisper', ['small', 'base', 'medium', 'large'], index=1
        )
        lang = st.text_input(
            '–Ø–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru, en) ‚Äî –ø—É—Å—Ç–æ = –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', value='russian'
        )
    wav = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ (wav/mp3/m4a)', type=['wav', 'mp3', 'm4a'])
    reference = st.text_area('–≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç', height=120)
    cols = st.columns(2)
    with cols[0]:
        start = st.button('üöÄ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑', type='primary', use_container_width=True)
    with cols[1]:
        st.write('')
    if not start:
        return
    if not wav:
        st.warning('–î–æ–±–∞–≤—å—Ç–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª.')
        return
    try:
        analyzer = AdvancedPronunciationAnalyzer(
            model_size=model_size, language=lang or None
        )
        tr = analyzer.transcribe(wav)
        st.subheader('üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç')
        st.write(tr.text or '‚Äî')
        st.subheader('üìä –ë–∞–∑–æ–≤—ã–µ –∞—É–¥–∏–æ-–ø—Ä–∏–∑–Ω–∞–∫–∏')
        feats = extract_basic_features(wav)
        st.json(feats.get('summary', {}))
        if reference.strip():
            st.subheader('üîó –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º')
            al = align_texts(reference, tr.text)
            st.write(al['diff_html'], unsafe_allow_html=True)
        st.subheader('üèÅ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞')
        score, details = analyzer.score(reference or '', tr, feats)
        if 'alignment' in details:
            st.markdown('#### –°–º—ã—Å–ª–æ–≤—ã–µ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–ø–æ —Å–ª–æ–≤–∞–º)')
            import pandas as pd

            df = pd.DataFrame(details['alignment']['alignment'])
            df_bad = df[(df['ref'] != df['hyp']) | (df['sim'] < 0.9)]
            st.dataframe(df_bad, hide_index=True, use_container_width=True)
            st.markdown('#### –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π')
            st.write(details['alignment']['diff_html'], unsafe_allow_html=True)
        st.metric('–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª', f'{score:.1f} / 100')
        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric('–õ–µ–∫—Å–∏—á–µ—Å–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å', f'{details["lexical_accuracy"]:.1f}')
            st.metric(
                '–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è', f'{details["recognition_reliability"]:.1f}'
            )
        with c2:
            st.metric('–ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è —á–∏—Å—Ç–æ—Ç–∞', f'{details["acoustic_cleanliness"]:.1f}')
            if details['tempo']['wpm'] is not None:
                st.metric('–¢–µ–º–ø —Ä–µ—á–∏ (WPM)', f'{details["tempo"]["wpm"]:.1f}')
        with c3:
            st.metric('–¢–µ–º–ø ‚Äî –±–∞–ª–ª', f'{details["tempo"]["score"]:.1f}')
            st.metric('–ü–ª–∞–≤–Ω–æ—Å—Ç—å (—Ñ–ª—é—ç–Ω—Å–∏)', f'{details["fluency"]:.1f}')
        save_result(
            'voice', {'recognized': tr.text, 'score': score, 'details': details}
        )
        with st.expander('üî¨ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ (—Å—ã—Ä—å—ë –∏ –≤–µ—Å–∞)'):
            st.json(details)
        with st.expander('üß© –°–ª–æ–≤–∞ —Å —Ç–∞–π–º–∫–æ–¥–∞–º–∏'):
            st.dataframe(tr.words)
    except TranscriptionError as error:
        st.error(f'–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {error}')
    except AnalysisError as error:
        st.error(f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error}')


if __name__ == '__main__':
    main()
